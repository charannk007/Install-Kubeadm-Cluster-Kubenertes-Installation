# Kubernetes Cluster Setup - Separate Scripts for Each Machine

## 📁 File Structure
```
k8s-cluster-setup/
├── master-node-setup.sh      # Complete setup for MASTER machine
├── worker-node-setup.sh      # Complete setup for WORKER machines  
├── generate-join-command.sh  # Run on master to get join command
└── verify-cluster.sh         # Run on master to verify everything
```

---

## 🎯 master-node-setup.sh
**📍 Complete setup for MASTER machine ONLY**

```bash
#!/bin/bash
set -e

echo "🎯 KUBERNETES MASTER NODE SETUP"
echo "================================="
echo "⚠️  Run this script ONLY on the MASTER machine"
echo ""

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   echo "❌ Don't run as root. Run as regular user with sudo access."
   exit 1
fi

echo "📋 Master Node Information:"
echo "Hostname: $(hostname)"
echo "IP Address: $(hostname -I | awk '{print $1}')"
echo "OS: $(lsb_release -d | cut -f2)"
echo "RAM: $(free -h | grep Mem | awk '{print $2}')"
echo "CPU: $(nproc) cores"
echo ""

# Get and confirm master IP
MASTER_IP=$(hostname -I | awk '{print $1}')
echo "🌐 Detected Master IP: $MASTER_IP"
read -p "Is this IP correct for master node? (y/n): " confirm
if [[ $confirm != "y" ]]; then
    read -p "Enter correct master IP: " MASTER_IP
fi

echo ""
echo "🚀 Starting Master Node Setup..."

# STEP 1: System Configuration
echo "🔧 Step 1: Configuring system..."
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
sudo ufw disable || echo "UFW not installed, skipping..."

# Load kernel modules
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# Configure sysctl
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF

sudo sysctl --system

# STEP 2: Install Container Runtime
echo "📦 Step 2: Installing containerd..."
sudo apt-get update
sudo apt-get install -y ca-certificates curl gnupg lsb-release

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo apt-get install -y containerd.io

# Configure containerd
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

sudo systemctl restart containerd
sudo systemctl enable containerd

# STEP 3: Install Kubernetes
echo "📦 Step 3: Installing Kubernetes (latest version)..."

# Try v1.30 first, fallback to v1.29
if curl -s -f https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key > /dev/null 2>&1; then
    echo "✅ Installing Kubernetes v1.30 (latest)"
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
else
    echo "✅ Installing Kubernetes v1.29 (stable)"
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
fi

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

echo "📋 Installed Kubernetes version:"
kubeadm version --output=short

# STEP 4: Initialize Kubernetes Cluster
echo "🚀 Step 4: Initializing Kubernetes cluster..."
sudo kubeadm init \
  --pod-network-cidr=192.168.0.0/16 \
  --apiserver-advertise-address=$MASTER_IP \
  --control-plane-endpoint=$MASTER_IP \
  --ignore-preflight-errors=NumCPU

# STEP 5: Configure kubectl
echo "🔧 Step 5: Configuring kubectl..."
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# STEP 6: Install Pod Network
echo "🌐 Step 6: Installing Flannel CNI..."
curl -o kube-flannel.yml https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
sed -i 's|"Network": "10.244.0.0/16"|"Network": "192.168.0.0/16"|g' kube-flannel.yml
kubectl apply -f kube-flannel.yml

# Wait for system pods
echo "⏳ Waiting for system pods to be ready..."
sleep 30
kubectl wait --for=condition=ready pod -l app=flannel -n kube-flannel --timeout=300s

# STEP 7: Generate Join Command
echo "🔑 Step 7: Generating worker join command..."
JOIN_COMMAND=$(kubeadm token create --print-join-command)

echo "#!/bin/bash" > worker-join-command.sh
echo "# Generated on: $(date)" >> worker-join-command.sh
echo "# Run this command on WORKER nodes ONLY" >> worker-join-command.sh
echo "echo 'Joining worker node to cluster...'" >> worker-join-command.sh
echo "sudo $JOIN_COMMAND" >> worker-join-command.sh
echo "echo 'Worker node joined successfully!'" >> worker-join-command.sh
chmod +x worker-join-command.sh

echo ""
echo "🎉 MASTER NODE SETUP COMPLETED!"
echo "================================"
echo ""
echo "📋 Cluster Status:"
kubectl get nodes
echo ""
echo "🔑 Worker Join Command:"
echo "sudo $JOIN_COMMAND"
echo ""
echo "📁 Join command saved to: worker-join-command.sh"
echo "📤 Copy worker-join-command.sh to worker machines and run it"
echo ""
echo "📝 Next Steps:"
echo "1. Copy worker-join-command.sh to worker machines"
echo "2. Run worker-node-setup.sh on each worker machine"
echo "3. Run ./worker-join-command.sh on each worker"
echo "4. Come back here and run verify-cluster.sh"
```

---

## 👷 worker-node-setup.sh  
**📍 Complete setup for WORKER machines ONLY**

```bash
#!/bin/bash
set -e

echo "👷 KUBERNETES WORKER NODE SETUP"
echo "==============================="
echo "⚠️  Run this script ONLY on WORKER machines"
echo ""

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   echo "❌ Don't run as root. Run as regular user with sudo access."
   exit 1
fi

echo "📋 Worker Node Information:"
echo "Hostname: $(hostname)"
echo "IP Address: $(hostname -I | awk '{print $1}')"
echo "OS: $(lsb_release -d | cut -f2)"
echo "RAM: $(free -h | grep Mem | awk '{print $2}')"
echo "CPU: $(nproc) cores"
echo ""

echo "🚀 Starting Worker Node Setup..."

# STEP 1: System Configuration
echo "🔧 Step 1: Configuring system..."
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
sudo ufw disable || echo "UFW not installed, skipping..."

# Load kernel modules
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# Configure sysctl
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF

sudo sysctl --system

# STEP 2: Install Container Runtime
echo "📦 Step 2: Installing containerd..."
sudo apt-get update
sudo apt-get install -y ca-certificates curl gnupg lsb-release

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo apt-get install -y containerd.io

# Configure containerd
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

sudo systemctl restart containerd
sudo systemctl enable containerd

# STEP 3: Install Kubernetes
echo "📦 Step 3: Installing Kubernetes (latest version)..."

# Try v1.30 first, fallback to v1.29
if curl -s -f https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key > /dev/null 2>&1; then
    echo "✅ Installing Kubernetes v1.30 (latest)"
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
else
    echo "✅ Installing Kubernetes v1.29 (stable)"
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
fi

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

sudo systemctl enable --now kubelet

echo "📋 Installed Kubernetes version:"
kubeadm version --output=short

echo ""
echo "✅ WORKER NODE SETUP COMPLETED!"
echo "=============================="
echo ""
echo "📝 Next Steps:"
echo "1. Get worker-join-command.sh from the MASTER node"
echo "2. Run: ./worker-join-command.sh"
echo "3. Verify on master with: kubectl get nodes"
echo ""
echo "🔑 Or manually run the join command provided by master:"
echo "sudo kubeadm join <master-ip>:6443 --token <token> --discovery-token-ca-cert-hash sha256:<hash>"
echo ""

# Check if join command file exists
if [ -f "worker-join-command.sh" ]; then
    echo "📂 Found worker-join-command.sh file!"
    read -p "Do you want to join the cluster now? (y/n): " join_now
    if [[ $join_now == "y" ]]; then
        chmod +x worker-join-command.sh
        ./worker-join-command.sh
        echo ""
        echo "🎉 Worker node joined successfully!"
        echo "📝 Verify on master node: kubectl get nodes"
    fi
else
    echo "📋 worker-join-command.sh not found. Copy it from master node first."
fi
```

---

## 🔑 generate-join-command.sh
**📍 Run on MASTER to regenerate join command**

```bash
#!/bin/bash
set -e

echo "🔑 GENERATING WORKER JOIN COMMAND"
echo "================================"
echo "⚠️  Run this script on MASTER node only"
echo ""

if ! command -v kubectl &> /dev/null; then
    echo "❌ kubectl not found. Run this on the master node."
    exit 1
fi

echo "🔑 Generating new worker join command..."
JOIN_COMMAND=$(kubeadm token create --print-join-command)

echo "#!/bin/bash" > worker-join-command.sh
echo "# Generated on: $(date)" >> worker-join-command.sh
echo "# Run this command on WORKER nodes ONLY" >> worker-join-command.sh
echo "echo 'Joining worker node to cluster...'" >> worker-join-command.sh
echo "sudo $JOIN_COMMAND" >> worker-join-command.sh
echo "echo 'Worker node joined successfully!'" >> worker-join-command.sh
chmod +x worker-join-command.sh

echo ""
echo "✅ Join command generated!"
echo "📁 Saved to: worker-join-command.sh"
echo ""
echo "🔑 Manual join command:"
echo "sudo $JOIN_COMMAND"
echo ""
echo "📤 Copy worker-join-command.sh to worker nodes and run it"
```

---

## 🔍 verify-cluster.sh
**📍 Run on MASTER to verify everything works**

```bash
#!/bin/bash

echo "🔍 KUBERNETES CLUSTER VERIFICATION"
echo "================================="
echo "⚠️  Run this script on MASTER node only"
echo ""

if ! command -v kubectl &> /dev/null; then
    echo "❌ kubectl not found. Run this on the master node."
    exit 1
fi

echo "📋 Cluster Nodes:"
kubectl get nodes -o wide

echo ""
echo "🏃 System Pods:"
kubectl get pods -A

echo ""
echo "🌐 Cluster Info:"
kubectl cluster-info

echo ""
echo "📊 Node Resources:"
kubectl top nodes 2>/dev/null || echo "⚠️  Metrics server not installed (optional)"

echo ""
echo "🧪 Testing cluster with sample deployment..."

# Create test deployment
kubectl create deployment test-nginx --image=nginx --replicas=2 2>/dev/null || echo "⚠️  test-nginx already exists"
kubectl expose deployment test-nginx --port=80 --type=NodePort 2>/dev/null || echo "⚠️  test-nginx service already exists"

echo "⏳ Waiting for deployment..."
kubectl wait --for=condition=available --timeout=300s deployment/test-nginx

echo ""
echo "📊 Test Deployment Status:"
kubectl get deployment test-nginx
kubectl get pods -l app=test-nginx -o wide
kubectl get service test-nginx

# Get service URL
NODE_PORT=$(kubectl get service test-nginx -o jsonpath='{.spec.ports[0].nodePort}')
MASTER_IP=$(hostname -I | awk '{print $1}')

echo ""
echo "🎉 CLUSTER VERIFICATION COMPLETE!"
echo "================================"
echo ""
echo "✅ Cluster Status: HEALTHY"
echo "✅ Test Service: http://$MASTER_IP:$NODE_PORT"
echo ""
echo "📋 Summary:"
kubectl get nodes --no-headers | wc -l | xargs echo "Total Nodes:"
kubectl get nodes --no-headers | grep -c "Ready" | xargs echo "Ready Nodes:"
kubectl get pods --all-namespaces --no-headers | grep -c "Running" | xargs echo "Running Pods:"
echo ""
echo "🧹 To cleanup test deployment:"
echo "kubectl delete deployment test-nginx"
echo "kubectl delete service test-nginx"
```

---

## 📋 Complete Execution Guide

### Step 1: Setup Master Node
```bash
# On MASTER machine:
chmod +x master-node-setup.sh
./master-node-setup.sh
# This creates worker-join-command.sh
```

### Step 2: Setup Worker Nodes  
```bash
# Copy worker-join-command.sh from master to worker machines

# On WORKER1 machine:
chmod +x worker-node-setup.sh
./worker-node-setup.sh
# If worker-join-command.sh is present, it will ask to join automatically

# On WORKER2 machine:
chmod +x worker-node-setup.sh  
./worker-node-setup.sh
# If worker-join-command.sh is present, it will ask to join automatically
```

### Step 3: Verify Everything
```bash
# On MASTER machine:
chmod +x verify-cluster.sh
./verify-cluster.sh
```

### Optional: Regenerate Join Command
```bash
# If you need a new join command (tokens expire):
chmod +x generate-join-command.sh
./generate-join-command.sh
```

## 🎯 File Summary
- **master-node-setup.sh** = Complete master setup (run once)
- **worker-node-setup.sh** = Complete worker setup (run on each worker)  
- **generate-join-command.sh** = Get new join command (if needed)
- **verify-cluster.sh** = Test everything works (run on master)

Each script is **self-contained** and tells you exactly which machine to run it on!
